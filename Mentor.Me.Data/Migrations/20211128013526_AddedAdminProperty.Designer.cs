// <auto-generated />

using Mentor.Me.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace Mentor.Me.Data.Migrations
{
    [DbContext(typeof(MentorMeContext))]
    [Migration("20211128013526_AddedAdminProperty")]
    partial class AddedAdminProperty
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AssignmentUser", b =>
                {
                    b.Property<Guid>("MembersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TasksId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MembersId", "TasksId");

                    b.HasIndex("TasksId");

                    b.ToTable("AssignmentUser");
                });

            modelBuilder.Entity("DealUser", b =>
                {
                    b.Property<Guid>("DealsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MembersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DealsId", "MembersId");

                    b.HasIndex("MembersId");

                    b.ToTable("DealUser");
                });

            modelBuilder.Entity("Mentor.Me.Data.Entities.ApplyRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PropositionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("ApplyRequests", (string)null);
                });

            modelBuilder.Entity("Mentor.Me.Data.Entities.Assignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.ToTable("Assignments", (string)null);
                });

            modelBuilder.Entity("Mentor.Me.Data.Entities.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DealId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("HasUnreadMessages")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DealId")
                        .IsUnique();

                    b.ToTable("Chat");
                });

            modelBuilder.Entity("Mentor.Me.Data.Entities.Deal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PropositionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Deals", (string)null);
                });

            modelBuilder.Entity("Mentor.Me.Data.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("SenderId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("Mentor.Me.Data.Entities.Proposition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("StartPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("Propositions", (string)null);
                });

            modelBuilder.Entity("Mentor.Me.Data.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PropositionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PropositionId");

                    b.ToTable("Skills", (string)null);
                });

            modelBuilder.Entity("Mentor.Me.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("PropositionUser", b =>
                {
                    b.Property<Guid>("MembersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PropositionsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MembersId", "PropositionsId");

                    b.HasIndex("PropositionsId");

                    b.ToTable("PropositionUser");
                });

            modelBuilder.Entity("AssignmentUser", b =>
                {
                    b.HasOne("Mentor.Me.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mentor.Me.Data.Entities.Assignment", null)
                        .WithMany()
                        .HasForeignKey("TasksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DealUser", b =>
                {
                    b.HasOne("Mentor.Me.Data.Entities.Deal", null)
                        .WithMany()
                        .HasForeignKey("DealsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mentor.Me.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mentor.Me.Data.Entities.ApplyRequest", b =>
                {
                    b.HasOne("Mentor.Me.Data.Entities.User", null)
                        .WithMany("ApplyRequests")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mentor.Me.Data.Entities.Assignment", b =>
                {
                    b.HasOne("Mentor.Me.Data.Entities.Skill", null)
                        .WithMany("Tasks")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mentor.Me.Data.Entities.Chat", b =>
                {
                    b.HasOne("Mentor.Me.Data.Entities.Deal", null)
                        .WithOne("Chat")
                        .HasForeignKey("Mentor.Me.Data.Entities.Chat", "DealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mentor.Me.Data.Entities.Message", b =>
                {
                    b.HasOne("Mentor.Me.Data.Entities.Chat", null)
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mentor.Me.Data.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Mentor.Me.Data.Entities.Skill", b =>
                {
                    b.HasOne("Mentor.Me.Data.Entities.Proposition", null)
                        .WithMany("Skills")
                        .HasForeignKey("PropositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mentor.Me.Data.Entities.User", b =>
                {
                    b.HasOne("Mentor.Me.Data.Entities.Chat", null)
                        .WithMany("Participants")
                        .HasForeignKey("ChatId");
                });

            modelBuilder.Entity("PropositionUser", b =>
                {
                    b.HasOne("Mentor.Me.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mentor.Me.Data.Entities.Proposition", null)
                        .WithMany()
                        .HasForeignKey("PropositionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mentor.Me.Data.Entities.Chat", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("Mentor.Me.Data.Entities.Deal", b =>
                {
                    b.Navigation("Chat")
                        .IsRequired();
                });

            modelBuilder.Entity("Mentor.Me.Data.Entities.Proposition", b =>
                {
                    b.Navigation("Skills");
                });

            modelBuilder.Entity("Mentor.Me.Data.Entities.Skill", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Mentor.Me.Data.Entities.User", b =>
                {
                    b.Navigation("ApplyRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
